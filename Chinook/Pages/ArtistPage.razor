@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Constants
@using Chinook.DTO
@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (ArtistDetails == null)
{
    <Loading />
}
else
{
    <h1>@ArtistDetails.ArtistVM.ArtistName</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in ArtistDetails.TracksVM)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            track.TrackCSSClass = ApplicationConstants.FavoriteTrackCssClass;
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="@track.TrackCSSClass"></i></a>
                        }
                        else
                        {
                            track.TrackCSSClass = ApplicationConstants.UnFavoriteTrackCssClass;
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="@track.TrackCSSClass"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal @ref="PlaylistDialog">
    <Title>Add to playlist</Title>
    <Body>
        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@ArtistDetails.ArtistVM.ArtistName - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist">
                <option>Playlist 1</option>
                <option>Playlist 2</option>
                <option>Playlist 3</option>
            </select>
        </div>
        <div class="mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <InputText class="form-control" id="NewPlaylist" @bind-Value="UpdateTrack.PlayListName" placeholder="Name for the new playlist" />

        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="AddTrackToPlaylist">Save</button>
    </Footer>
</Modal>

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    private Modal PlaylistDialog { get; set; }
    [Inject] HttpClient Http { get; set; }

    private ArtistSearchResultVM ArtistDetails;
    private List<PlaylistTrack> Tracks;
    private PlaylistTrackVM SelectedTrack;
    private string InfoMessage;
    private string CurrentUserId;
    private UpdateTrackDTO UpdateTrack = new();

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await GetUserId();
        await InvokeAsync(StateHasChanged);
        await GetArtistFullDetails();
    }


    public async Task GetArtistFullDetails()
    {
        ArtistDetails = await Http.GetFromJsonAsync<ArtistSearchResultVM>($"api/Artist/GetArtistFullDetails/{ArtistId}/{CurrentUserId}");

    }
    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrack(long trackId)
    {
        var track = ArtistDetails.TracksVM.FirstOrDefault(t => t.TrackId == trackId);
        UpdateTrack.TrackId = track.TrackId;
        UpdateTrack.UserId = CurrentUserId;
        UpdateTrack.PlayListName = ApplicationConstants.FavoritePlayListDefaultName;

        await Http.PutAsJsonAsync($"api/UserPlaylist/UpdateTrackAsFavorite/", UpdateTrack);
        await GetArtistFullDetails();
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrack(long trackId)
    {
        var track = ArtistDetails.TracksVM.FirstOrDefault(t => t.TrackId == trackId);
        UpdateTrack.TrackId = track.TrackId;
        UpdateTrack.UserId = CurrentUserId;
        UpdateTrack.PlayListName = ApplicationConstants.FavoritePlayListDefaultName;

        await Http.PutAsJsonAsync($"api/UserPlaylist/UpdateTrackAsUnFavorite/", UpdateTrack);
        await GetArtistFullDetails();
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = ArtistDetails.TracksVM.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    private async Task AddTrackToPlaylist()
    {
        UpdateTrack.TrackId = SelectedTrack.TrackId;
        UpdateTrack.UserId = CurrentUserId;

        await Http.PutAsJsonAsync($"api/UserPlaylist/AddTrackToSpecificPlayList/", UpdateTrack);
        await GetArtistFullDetails();
        CloseInfoMessage();
        InfoMessage = $"Track {ArtistDetails.ArtistVM.ArtistName} - {SelectedTrack.AlbumTitle} - {SelectedTrack.TrackName} added to playlist {{playlist name}}.";
        PlaylistDialog.Close();
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }
}
